/ ------------------------------------------redux saga----------------------------
// sagas >
//    |----index.js 

//-----1----- takeLatest : debounces the event meaning 
//----------- Return a function, that, as long as it continues to be invoked, will
// not be triggered. The function will be called after it stops being 
// called for `wait` milliseconds. If `immediate` is passed, trigger the 
// function on the leading edge, instead of the trailing.

// -----------debounce/takeLatest usecase-------------
// Remember, the `debounce` method is intended for use on events
// that rapidly fire, ie: a window resize or scroll. The *first* 
// time the event fires, the `timeout` variable has been declared, 
// but no value has been assigned to it - it is `undefined`. 
// Therefore, nothing is removed from JavaScript's execution queue 
// because nothing has been placed in the queue - there is nothing 
// to clear.


//-----2----- takeEvery :  Spawns a saga on each action dispatched to the Store that matches pattern
//----------- takeEvery to start a new fetchUser task on each dispatched USER_REQUESTED action:
import { put, call, takeLatest, takeEvery } from "redux-saga/effects";
import { delay } from "redux-saga";

export function* incrementAsync() {
  yield call(delay, 1000);  //delays the 'INCREMENT' action by 1 second
  yield put({ type: "INCREMENT" }); //dipatches an action
}
export function* randomCHAR() {
  yield put({ type: "RANDOM" });  //dispatches an action
}

// sagaMiddleware syncs the changes occured in the rootSaga
// rootSaga is the generator function which always watches for an action to dispatch from the component
export default function* rootSaga() {
  yield takeLatest("INCREMENT_ASYNC", incrementAsync);
  yield takeEvery("RANDOM_CHAR", randomCHAR); 
}

// ----------------index.js with redux store--------------
import React from "react";
import ReactDOM from "react-dom";
import { createStore, applyMiddleware } from "redux";
import createSagaMiddleware from "redux-saga";
import sagaMonitor from "./sagaMonitor";

import Counter from "./components/Counter";
import reducer from "./reducers";
import rootSaga from "./sagas";

const sagaMiddleware = createSagaMiddleware({ sagaMonitor });
const store = createStore(reducer, applyMiddleware(sagaMiddleware));
sagaMiddleware.run(rootSaga);

const action = type => store.dispatch({ type });

function render() {
  ReactDOM.render(
    <Counter
      value={store.getState().count}
      char={store.getState().char}
      rand={() => action("RANDOM_CHAR")}
      onIncrement={() => action("INCREMENT")}
      onDecrement={() => action("DECREMENT")}
      onIncrementIfOdd={() => action("INCREMENT_IF_ODD")}
      onIncrementAsync={() => action("INCREMENT_ASYNC")}
    />,
    document.getElementById("root")
  );
}

render();
store.subscribe(render);
