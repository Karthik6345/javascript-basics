/ ------------------------------------------------------------------------------------------
// question on closure + loop + scoping
const arr = [10, 12, 15, 21];
for (var i = 0; i < arr.length; i++) {
  setTimeout(function() {
    console.log('Index: ' + i + ', element: ' + arr[i]);
  }, 3000);
}
//output 
// Index: 4, element: undefined
// Index: 4, element: undefined
// Index: 4, element: undefined
// Index: 4, element: undefined

// The reason for this is because the setTimeout function creates a function (the closure) that has access to its outer scope, 
// which is the loop that contains the index i. 
// After 3 seconds go by, the function is executed and it prints out the value of i, 
// which at the end of the loop is at 4 because it cycles through 0, 1, 2, 3, 4 
// and the loop finally stops at 4.arr[4] does not exist, which is why you get undefined.

// ----Approach 1-----
const arr = [10, 12, 15, 21];
for (var i = 0; i < arr.length; i++) {
  setTimeout(function() {
    console.log('Index: ' + i + ', element: ' + arr[i]); 
  }(i), 3000);  
  //you need to create a new function which invokes itself at runtime.
  //using Immediately invoked function expression(IIFE), persisting the value of i in the callback function
  
}

// ----Approach 2-----
const arr = [10, 12, 15, 21];
for (let i = 0; i < arr.length; i++) {
  // using the ES6 let syntax, it creates a new binding
  // every single time the function is called
  // read more here: http://exploringjs.com/es6/ch_variables.html#sec_let-const-loop-heads
  setTimeout(function() {
    console.log('The index of this number is: ' + i);
  }, 3000);
}
