Redux
  action  <--- view
    |             |
    |             |
  Reducer         |
    |             |
    |             |
  store---------->
  
  Model/view dispatches an action to the action creator.
  
  Action creators are exactly thatâ€”functions that create actions. action creators simply return an action.
  
  Actions ---Actions are payloads of information that send data from your application to your store.
  They are the only source of information for the store. 
  //synchronous
  function addTodo(text) {  //  action creator
    return {                  // action
      type: ADD_TODO,
      text
    }
  }
  //asynchronous call
  function fetchPosts(subreddit) {
  return dispatch => {
    dispatch(requestPosts(subreddit))
    return fetch(`https://www.reddit.com/r/${subreddit}.json`)
      .then(response => response.json())
      .then(json => dispatch(receivePosts(subreddit, json)))
  }
}

Reducer:Reducers specify how the application's state changes in response to actions sent to the store. 
It should be pure function.

import {
  SET_VISIBILITY_FILTER,
  VisibilityFilters
} from './actions'

...

function todoApp(state = initialState, action) {
  switch (action.type) {
    case SET_VISIBILITY_FILTER:
      return Object.assign({}, state, {
        visibilityFilter: action.filter
      })
    default:
      return state;  
  }
}

Store---------------
export default combineReducers({
  todos,
  visibilityFilter
})

  
