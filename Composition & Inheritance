---------------inheritance---------------
------Example 1----
const Animal =  {
  eat : function() {
    console.log(this.name + "is eating");
  }
}

const Dog = Object.create(Animal, {
  name: { value: "husky" },
  color: { value: "white" }
});
Dog.bark = function() {
  console.log(this.name + " is barking bow bow");
};
Dog.bark();
console.log(Dog.eat());

--------Example 2----------
//parent 
const Character = {
    talk: function(...msg){ 
        console.log( msg.join(' ') ) 
    }
}
//child 
//data definition
const Human = Object.create(Character, {
    speed: {value:3},
    name: {value:'Hector'}
});
//method definition
Human.walk= function(){ 
    this.talk(this.name, 'walking') 
};
Human.eat= function(){ 
    this.talk(this.name, 'eating') 
};
//child
const Robot = Object.create(Character, {
    speed: {value:8},
    id: {value:'THX1138'}
});
Robot.drive= function (){ 
    this.talk(this.id, '\u26A1', 'driving')
};
Robot.wifi= function (){ 
    this.talk(this.id, '\u26A1', 'connecting')
};

//invoke child object
const sam = Object.create(Human, 
                          {name:{value: 'Samuel'}});
sam.walk();
//invoke parent object through child i.e.,instantiate
sam.talk('Hello from Samuel.');

const x73 = Object.create(Robot, 
                          {id:{value: 'x73'}});
x73.drive();
x73.wifi();
------------------

// composition __________
Composition makes the functions more granular, resusuable and open for new features without breaking the structure.
import it and use that function, object, or a class, without extending it.
const getEnergy = (state) => ({
  eat : () => {
    console.log(state.name + "is eating");
  }
})

const Animal1 = (name, color) => {
  let state = {
    name,
    color
  }
  return Object.assign(state,
    getEnergy(state)
    )
}
const Dog1 = Animal1("Husky", "brown");
Dog1.eat()

---Example 2--------
const talker = (state)=>({ 
    talk: (...msg)=> console.log( msg.join(' '))
});
const walker = (state) => ({
    walk: ()=> {
        let nm = state.name || state.id;
        console.log(nm, 'walking');
    }
});
const eater = (state) => ({
    eat: ()=> {
        let nm = state.name || state.id;
        console.log(nm, 'eating');
    }
});
const driver = (state) => ({
    drive: ()=>{
        let nm = state.name || state.id;
        console.log(nm, '\u26A1', 'driving');
    }
});
const wifier = (state) => ({
    wifi: ()=>{
        let nm = state.name || state.id;
        console.log(nm, '\u26A1', 'connecting');
    }
});

const Person = (name, speed=3) => {
    let state = {
        name,
        speed
    }
    return Object.assign({}, 
                         talker(state), 
                         walker(state), 
                         eater(state));
};
let Bob = Person('Bob');
Bob.talk('Hello from Bob.');
Bob.eat();
Bob.walk();

const Android = (id, speed=6) => {
    let state = {
        id,
        speed
    }
    return Object.assign({}, 
                         talker(state), 
                         driver(state), 
                         wifier(state));
};
let k45 = Android('k45');
k45.drive();
k45.wifi();

const Cyborg = (name, speed) => {
    let state = {
        name,
        speed
    };
    return Object.assign({},
                        talker(state),
                        walker(state),
                        wifier(state));
};
let Dolph = Cyborg('Dolph', 9);
Dolph.walk();
Dolph.wifi();
